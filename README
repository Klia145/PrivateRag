# Intelligent Document Q&A System (RAG)

A Retrieval-Augmented Generation (RAG) system for precise, context-aware document question answering.

The Intelligent Document Q&A System combines advanced text embedding, semantic retrieval, and generative language models to quickly and accurately answer user questions based on local document repositories.

## Features

- **Document Upload & Indexing**: Easily upload and automatically process `.txt` documents.
- **Contextual Q&A**: Generate precise, context-based answers using a local RAG pipeline.
- **User-Friendly Interface**: Interactive and intuitive graphical interface using Tkinter.

## System Components

The system includes three main modules:

1. **Document Processor (`buildTheKnowledge.py`)**:
   - Automatically splits documents into manageable chunks.
   - Encodes chunks into semantic vectors.
   - Indexes these vectors with FAISS.

2. **Retrieval & Generation Engine (`BuildTheRAG.py`)**:
   - Performs semantic retrieval from indexed document chunks.
   - Generates natural-language responses via local Ollama API.

3. **Graphical Interface (`main.py`)**:
   - Built using Tkinter for straightforward document management and querying.
   - Simple interface for seamless user interaction.

---

### Project Structure

```bash
.
├── DateBase/                    # Uploaded documents folder
├── ThemessageDatebase           # Processed data storage
│   ├── chunks.txt               # Chunks extracted from documents
│   └── knowledge.index          # FAISS vector index
├── buildTheKnowledge.py         # Document chunking and indexing
├── BuildTheRAG.py               # Retrieval and answer generation
└── main.py                      # GUI Application entry point

