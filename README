## Intelligent Document Q&A System (RAG Integration)

The Intelligent Document Q&A System leverages Retrieval-Augmented Generation (RAG) technology, allowing users to upload text documents and receive intelligent answers based on the document content. It uses document chunking, sentence embeddings, and vector-based semantic search to provide precise, contextually accurate responses.

## Features

- **Automatic Document Processing:**
  - Upload `.txt` documents via GUI.
  - Automatically chunk documents by titles and create embeddings.

- **Semantic Retrieval & Question Answering:**
  - Retrieve relevant information using FAISS semantic search.
  - Generate precise answers using local language models (Claude API via Ollama).

- **User-friendly GUI:**
  - Tkinter-based intuitive user interface.
  - Status updates and progress indicators during processing.

---

## Components

The project includes the following main components:

### 1. **Document Processing (`buildTheKnowledge.py`):**
  - Partitions documents into manageable chunks based on titles.
  - Generates embeddings using SentenceTransformer.
  - Stores embeddings in a FAISS vector database.

### 2. **Retrieval-Augmented Generation System (`BuildTheRAG.py`):**
  - Implements semantic search over indexed documents.
  - Interfaces with the local Claude AI model through HTTP requests.
  - Answers user queries based on retrieved context.

### 3. **Graphical User Interface (`demotwo.py`):**
  - User-friendly interface built with Tkinter.
  - Facilitates document uploads and initiates document processing.
  - Provides real-time status updates and answers user queries.

## Installation

### Prerequisites

- Python 3.10 or newer
- FAISS (CPU recommended)
- SentenceTransformers
- Unstructured
- Tkinter (typically included with Python installations)
- Ollama (local Claude AI instance running, e.g., `deepseek-r1:1.5b`)

### Installing Dependencies

Install all required Python packages:

```bash
pip install sentence-transformers faiss-cpu unstructured requests


